COMMAND=$1
shift

CLUSTER_VERSION_ROOT="$CLUSTER_ROOT/$MYSQL_VERSION"
if [ $# -gt 0 ]; then
	CLUSTER=$1
	shift
	CLUSTER_CURRENT_ROOT="$CLUSTER_VERSION_ROOT/$CLUSTER"
	GLOBAL_VERSION_STRING=`echo $MYSQL_VERSION|awk -F'.' '{print $1}'`
	MINOR_VERSION_STRING=`echo $MYSQL_VERSION|awk -F'.' '{print $2}'`
	PATCH_VERSION_STRING=`echo $MYSQL_VERSION|awk -F'.' '{print "0"$3}'|sed -e "s/[^0-9]//g"|tail -c 3`
	VERSION_STRING=`echo $GLOBAL_VERSION_STRING$MINOR_VERSION_STRING$PATCH_VERSION_STRING`
	PORT_VERSION_STRING=`echo $MYSQL_VERSION|sed -e "s/[^0-9]//g"|head -c 5`
fi


cd $MYSQL_CURRENT_ROOT


CLUSTER_DATA_PATH="$CLUSTER_CURRENT_ROOT/data"
MYSQL_CONF="$CLUSTER_CURRENT_ROOT/my.cnf"

cluster_admin()
{
	cluster_ping $CLUSTER
	if [ $? -eq 0 ]; then
		echo 'MySQL is not running'
		return 1
	fi

	mysqladmin --defaults-file=$MYSQL_CONF -u root $*
	return $?
}

cluster_create()
{
	# get install command
	if [ $VERSION_STRING -lt 5706 ]; then
		DB_INSTALL="scripts/mysql_install_db"
		if [ ! -e $DB_INSTALL ]; then
			DB_INSTALL="bin/mysql_install_db --no-defaults"
		fi
	else
		DB_INSTALL="bin/mysqld --no-defaults --initialize-insecure"
	fi

	mkdir -p $CLUSTER_CURRENT_ROOT
	mkdir -p $CLUSTER_DATA_PATH

	$DB_INSTALL --datadir=$CLUSTER_DATA_PATH > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "Error:make database."
		exit 1
	fi

	# set my.cnf
	GLOBAL_VERSION=`echo $VERSION_STRING|cut -c 1-2`
	if [ $VERSION_STRING -lt 5600 ]; then
		# 5.5.x
		cp support-files/my-medium.cnf $MYSQL_CONF
	elif [ $VERSION_STRING -lt 5700 ]; then #5100-5600
		# 5.6.x
		cp support-files/my-default.cnf $MYSQL_CONF
	elif [ $VERSION_STRING -lt 5800 ]; then #5100-5600
		# 5.7.x
		cp support-files/my-default.cnf $MYSQL_CONF
	else
		cp mysql-test/suite/rpl/my.cnf $MYSQL_CONF
	fi

	# set port
	PORT_FILE="$CLUSTER_VERSION_ROOT/.port"
	PORT_NUM=$PORT_VERSION_STRING
	if [ -e $PORT_FILE ]; then
		PORT_NUM=`cat $PORT_FILE`
		PORT_NUM=`echo "$PORT_NUM+1"|bc`
	fi
	sed -i -e "s/port.*$/port = $PORT_NUM/g" $MYSQL_CONF
	echo $PORT_NUM > $PORT_FILE

	# set hostname
	HOSTNAME=`hostname`
	sed -i -e "s/<HOSTNAME>/$HOSTNAME/g" $MYSQL_CONF

	#root's default password is 'password'
	#"$MYSQLVC_BIN_ROOT/mysqladmin" -u root password "password"

	echo "MySQL base directory is $MYSQL_CURRENT_ROOT ."
	echo "my.cnf is $MYSQL_CONF ."
}

cluster_dump()
{
	cluster_ping $CLUSTER
	if [ $? -eq 0 ]; then
		echo 'MySQL is not running'
		return 1
	fi

	mysqldump --defaults-file=$MYSQL_CONF -u root $*
	return $?
}

cluster_delete()
{
	cluster_ping $CLUSTER
	if [ $? -ne 0 ]; then
		echo 'MySQL is running'
		return 1
	fi

	rm -rf $CLUSTER_CURRENT_ROOT
	if [ 0 -eq `ls $CLUSTER_VERSION_ROOT|wc -l` ]; then
		rm -rf $CLUSTER_VERSION_ROOT
	fi
	echo "$CLUSTER is deleted"
}

cluster_start()
{
	cluster_ping $CLUSTER
	if [ $? -ne 0 ]; then
		echo 'MySQL is running'
		return 1
	fi
	if [ ! -d $CLUSTER_VERSION_ROOT ]; then
		echo "Cluster($CLUSTER) is not found"
		return 1
	fi

	/bin/echo -n "MySQL start"
	OPTION="--defaults-file=$MYSQL_CONF --basedir=$MYSQL_CURRENT_ROOT --datadir=$CLUSTER_DATA_PATH --log-error=$CLUSTER_DATA_PATH/mysqlvc.err"
	"bin/mysqld_safe" $OPTION > /dev/null 2>&1 &

	TIMEOUT=60
	STEP=1
	HOSTNAME=`hostname`
	while [ ! -f "$CLUSTER_DATA_PATH/$HOSTNAME.pid" ]; do
		STEP=$(($STEP + 1))
		/bin/echo -n '.'
		if [ $STEP -eq $TIMEOUT ]; then
			echo "Timeout"
			exit 1
		fi
		sleep 1
	done
	echo ""
}

cluster_stop()
{
	cluster_admin shutdown>/dev/null 2>&1
	return $?
}

cluster_use()
{
	if [ -e $CLUSTER ]; then
		echo 'Error:Cluster name is empty.'
		return 1
	fi
	OPTION="--defaults-file=$MYSQL_CONF -u root"
	"bin/mysql" $OPTION $*
}

cluster_ping()
{
	#cluster is running?
	name=$1
	c=`ps aux|grep '[m]ysqld_safe'|grep $MYSQL_VERSION|grep $name|wc -l`
	if [ $c = 0 ]; then
		# running
		return 0
	else
		# not running
		return 1
	fi
}

print_help()
{
	echo "Usage: mysqlvc cluster option... [cluster]"
	echo "admin cluster                admin command"
	echo "create cluster               create cluster"
	echo "delete cluster               delete cluster"
	echo "dump [mysqldump option]      dump command"
	echo "list cluster                 print created clusters and state"
	echo "start cluster                start cluster"
	echo "stop cluster                 stop cluster"
	echo "restart cluster              restart cluster"
	echo "use cluster                  mysql repl"
	echo "help                         Print this help."
}

case $COMMAND in
admin)
	cluster_admin $*
	;;
create)
	cluster_create
	;;
delete)
	cluster_delete
	;;
dump)
	cluster_dump $*
	;;
list)
	echo "MySQL version:$MYSQL_VERSION"
	if [ -d $CLUSTER_VERSION_ROOT ]; then
		echo "  cluster	status"
		ls "$CLUSTER_VERSION_ROOT"| while read name; do
			cluster_ping $name
			if [ $c = 0 ]; then
				echo "  $name	stop"
			else
				echo "  $name	running"
			fi
		done
	else
		echo "cluster is not found"
	fi
	;;
start)
	cluster_start
	;;
stop)
	cluster_stop
	;;
restart)
	cluster_stop
	cluster_start
	;;
use)
	cluster_use $*
	;;
*)
	#echo "args error"
	print_help
	;;
esac
