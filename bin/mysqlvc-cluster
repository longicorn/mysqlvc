COMMAND=$1
shift

CLUSTER_VERSION_ROOT="$CLUSTER_ROOT/$MYSQL_VERSION"
if [ $# -gt 0 ]; then
	CLUSTER=$1
	shift
	CLUSTER_CURRENT_ROOT="$CLUSTER_VERSION_ROOT/$CLUSTER"
	#VERSION_STRING=`echo $MYSQL_VERSION|sed -e "s/[^0-9]//g"`
	VERSION_STRING=`echo $MYSQL_VERSION|sed -e "s/[^0-9]//g"|head -c 4`
	PORT_VERSION_STRING=`echo $MYSQL_VERSION|sed -e "s/[^0-9]//g"|head -c 5`
fi


cd $MYSQL_CURRENT_ROOT


DB_INSTALL="scripts/mysql_install_db"
if [ ! -e $DB_INSTALL ]; then
	DB_INSTALL="bin/mysql_install_db"
fi

CLUSTER_DATA_PATH="$CLUSTER_CURRENT_ROOT/data"
MYSQL_CONF="$CLUSTER_CURRENT_ROOT/my.cnf"

cluster_admin()
{
	cluster_ping $CLUSTER
	if [ $? -eq 0 ]; then
		echo 'MySQL is not running'
		return 1
	fi

	mysqladmin --defaults-file=$MYSQL_CONF -u root $*
	return $?
}

cluster_create()
{
	mkdir -p $CLUSTER_CURRENT_ROOT
	mkdir -p $CLUSTER_DATA_PATH
	$DB_INSTALL --basedir=$MYSQL_CURRENT_ROOT --datadir=$CLUSTER_DATA_PATH --ldata=$CLUSTER_DATA_PATH --no-defaults > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "Error:make database."
		exit 1
	fi

	# setting my.cnf
	if [ $VERSION_STRING -gt 5700 ]; then
		echo 'after...'
	elif [ $VERSION_STRING -gt 5600 ]; then
		curl https://raw.github.com/kazeburo/mysetup/master/mysql/my56.cnf -o $MYSQL_CONF > /dev/null 2>&1
		sed -i -e "s%/var/lib/mysql%$CLUSTER_DATA_PATH%g" $MYSQL_CONF
		sed -i -e "s/<SERVER_ID>/1/g" $MYSQL_CONF
	elif [ $VERSION_STRING -gt 5500 ]; then
		curl https://raw.github.com/kazeburo/mysetup/master/mysql/my55.cnf -o $MYSQL_CONF > /dev/null 2>&1
		sed -i -e "s%/var/lib/mysql%$CLUSTER_DATA_PATH%g" $MYSQL_CONF
		sed -i -e "s/<SERVER_ID>/1/g" $MYSQL_CONF
	elif [ $VERSION_STRING -gt 5100 ]; then
		curl https://raw.github.com/kazeburo/mysetup/master/mysql/my51.cnf -o $MYSQL_CONF > /dev/null 2>&1
		sed -i -e "s%/var/lib/mysql%$CLUSTER_DATA_PATH%g" $MYSQL_CONF
		sed -i -e "s/<SERVER_ID>/1/g" $MYSQL_CONF
	elif [ $VERSION_STRING -gt 4000 ]; then
		curl https://raw.github.com/kazeburo/mysetup/master/mysql/my40.cnf -o $MYSQL_CONF > /dev/null 2>&1
	elif [ $VERSION_STRING -gt 3000 ]; then
		curl https://raw.github.com/kazeburo/mysetup/master/mysql/my40.cnf -o $MYSQL_CONF > /dev/null 2>&1
	fi

	# set port
	PORT_FILE="$CLUSTER_VERSION_ROOT/.port"
	PORT_NUM=$PORT_VERSION_STRING
	if [ -e $PORT_FILE ]; then
		PORT_NUM=`cat $PORT_FILE`
		PORT_NUM=`echo "$PORT_NUM+1"|bc`
	fi
	sed -i -e "s/port.*$/port = $PORT_NUM/g" $MYSQL_CONF
	echo $PORT_NUM > $PORT_FILE

	# set hostname
	HOSTNAME=`hostname`
	sed -i -e "s/<HOSTNAME>/$HOSTNAME/g" $MYSQL_CONF

	#root's default password is 'password'
	#"$MYSQLVC_BIN_ROOT/mysqladmin" -u root password "password"

	echo "MySQL base directory is $MYSQL_CURRENT_ROOT."
	echo "my.cnf is $MYSQL_CONF."
}

cluster_dump()
{
	cluster_ping $CLUSTER
	if [ $? -eq 0 ]; then
		echo 'MySQL is not running'
		return 1
	fi

	mysqldump --defaults-file=$MYSQL_CONF -u root $*
	return $?
}

cluster_delete()
{
	cluster_ping $CLUSTER
	if [ $? -ne 0 ]; then
		echo 'MySQL is running'
		return 1
	fi

	rm -rf $CLUSTER_CURRENT_ROOT
	if [ 0 -eq `ls $CLUSTER_VERSION_ROOT|wc -l` ]; then
		rm -rf $CLUSTER_VERSION_ROOT
	fi
	echo "$CLUSTER is deleted"
}

cluster_start()
{
	cluster_ping $CLUSTER
	if [ $? -ne 0 ]; then
		echo 'MySQL is running'
		return 1
	fi

	/bin/echo -n "MySQL start"
	OPTION="--defaults-file=$MYSQL_CONF --basedir=$MYSQL_CURRENT_ROOT --datadir=$CLUSTER_DATA_PATH --log-error=$CLUSTER_DATA_PATH/mysqlvc.err"
	"bin/mysqld_safe" $OPTION > /dev/null 2>&1 &

	TIMEOUT=60
	STEP=1
	HOSTNAME=`hostname`
	while [ ! -f "$CLUSTER_DATA_PATH/$HOSTNAME.pid" ]; do
		STEP=$(($STEP + 1))
		/bin/echo -n '.'
		if [ $STEP -eq $TIMEOUT ]; then
			echo "Timeout"
			exit 1
		fi
		sleep 1
	done
	echo ""
}

cluster_stop()
{
	cluster_admin shutdown>/dev/null 2>&1
	return $?
}

cluster_use()
{
	if [ -e $CLUSTER ]; then
		echo 'Error:Cluster name is empty.'
		return 1
	fi
	OPTION="--defaults-file=$MYSQL_CONF -u root"
	"bin/mysql" $OPTION $*
}

cluster_ping()
{
	#cluster is running?
	name=$1
	c=`ps aux|grep '[m]ysqld_safe'|grep $MYSQL_VERSION|grep $name|wc -l`
	if [ $c = 0 ]; then
		# running
		return 0
	else
		# not running
		return 1
	fi
}

case $COMMAND in
admin)
	cluster_admin $*
	;;
create)
	cluster_create
	;;
delete)
	cluster_delete
	;;
dump)
	cluster_dump $*
	;;
list)
	echo "MySQL version:$MYSQL_VERSION"
	echo "  cluster	status"
	ls "$CLUSTER_VERSION_ROOT"| while read name; do
		cluster_ping $name
		if [ $c = 0 ]; then
			echo "  $name	stop"
		else
			echo "  $name	running"
		fi
	done
	;;
start)
	cluster_start
	;;
stop)
	cluster_stop
	;;
restart)
	cluster_stop
	cluster_start
	;;
use)
	cluster_use $*
	;;
*)
	echo "args error"
	;;
esac
